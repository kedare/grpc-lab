@page "/monitoring"
@using BlazInfra.Data
@using BlazInfra.Protobuf
@using Grpc.Core
@inject MonitoringService.MonitoringServiceClient MonitoringService
@inject ILogger<Monitoring> Logger
@implements IDisposable

<PageTitle>Monitoring Service</PageTitle>

<h1>Monitoring Service</h1>

<p>Monitoring Service getting data from the gomonitor service via gRPC</p>

@if (_isLoading || _cpuUsage == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>System</th>
                <th>User</th>
                <th>IOWait</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@_cpuUsage.SystemTime</td>
                <td>@_cpuUsage.UserTime</td>
                <td>@_cpuUsage.IowaitTime</td>
            </tr>
        </tbody>
    </table>
}

@code {
    private CpuUsageInfoResponse? _cpuUsage;
    private bool _isLoading = true;
    private bool _isCancelled = false;
    private AsyncServerStreamingCall<CpuUsageInfoResponse>? _stream;

    // // Oneshot mode
    // protected override async Task OnInitializedAsync()
    // {
    //     _cpuUsage = await MonitoringService.GetCpuUsageInfoAsync(new CpuUsageInfoRequest()
    //     {
    //         Interval = 1,
    //     });
    //     _isLoading = false;
    // }
    
    // Streaming mode
    protected override async Task OnInitializedAsync()
    {
        InvokeAsync(async () => await StreamCpuUsageInfo());
    }
    
    private async Task StreamCpuUsageInfo()
    {
        _stream = MonitoringService.StreamCpuUsageInfo(new CpuUsageInfoRequest()
        {
            Interval = 1,
        });
        
        Logger.LogInformation("Starting to stream cpu usage");
        
        await foreach (var cpuUsage in _stream.ResponseStream.ReadAllAsync())
        {
            if (_isCancelled)
            {
                Logger.LogInformation("Cancelled Monitoring component");
                break;
            }
            
            _cpuUsage = cpuUsage;
            _isLoading = false;
            StateHasChanged();
        }
    }
    
    // Set the _isCancelled flag to true when the component is disposed
    public void Dispose()
    {
        Logger.LogInformation("Dispose Monitoring component");
        _stream.Dispose();
        _isCancelled = true;
    }
    
}
